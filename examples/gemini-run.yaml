# Example llama-stack configuration for Google Gemini inference
# 
# Contributed by @eranco74 (2025-08). See https://github.com/rh-ecosystem-edge/assisted-chat/blob/main/template.yaml#L282-L386
# This file shows how to integrate Gemini with LCS.
# 
# Notes:
# - You will need valid Gemini API credentials to run this.
# - You will need a postgres instance to run this config.
#
version: 2
image_name: gemini-config
apis:
- agents
- datasetio
- eval
- files
- inference
- safety
- scoring
- telemetry
- tool_runtime
- vector_io
providers:
  inference:
  - provider_id: ${LLAMA_STACK_INFERENCE_PROVIDER}
    provider_type: remote::gemini
    config:
      api_key: ${env.GEMINI_API_KEY}
  vector_io: []
  files: []
  safety: []
  agents:
  - provider_id: meta-reference
    provider_type: inline::meta-reference
    config:
      persistence_store:
        type: postgres
        host: ${env.LLAMA_STACK_POSTGRES_HOST}
        port: ${env.LLAMA_STACK_POSTGRES_PORT}
        db: ${env.LLAMA_STACK_POSTGRES_NAME}
        user: ${env.LLAMA_STACK_POSTGRES_USER}
        password: ${env.LLAMA_STACK_POSTGRES_PASSWORD}
      responses_store:
        type: postgres
        host: ${env.LLAMA_STACK_POSTGRES_HOST}
        port: ${env.LLAMA_STACK_POSTGRES_PORT}
        db: ${env.LLAMA_STACK_POSTGRES_NAME}
        user: ${env.LLAMA_STACK_POSTGRES_USER}
        password: ${env.LLAMA_STACK_POSTGRES_PASSWORD}
  telemetry:
  - provider_id: meta-reference
    provider_type: inline::meta-reference
    config:
      service_name: "${LLAMA_STACK_OTEL_SERVICE_NAME}"
      sinks: ${LLAMA_STACK_TELEMETRY_SINKS}
      sqlite_db_path: ${STORAGE_MOUNT_PATH}/sqlite/trace_store.db
  eval: []
  datasetio: []
  scoring:
  - provider_id: basic
    provider_type: inline::basic
    config: {}
  - provider_id: llm-as-judge
    provider_type: inline::llm-as-judge
    config: {}
  tool_runtime:
  - provider_id: rag-runtime
    provider_type: inline::rag-runtime
    config: {}
  - provider_id: model-context-protocol
    provider_type: remote::model-context-protocol
    config: {}
metadata_store:
  type: sqlite
  db_path: ${STORAGE_MOUNT_PATH}/sqlite/registry.db
inference_store:
  type: postgres
  host: ${env.LLAMA_STACK_POSTGRES_HOST}
  port: ${env.LLAMA_STACK_POSTGRES_PORT}
  db: ${env.LLAMA_STACK_POSTGRES_NAME}
  user: ${env.LLAMA_STACK_POSTGRES_USER}
  password: ${env.LLAMA_STACK_POSTGRES_PASSWORD}
models:
- metadata: {}
  model_id: ${LLAMA_STACK_2_0_FLASH_MODEL}
  provider_id: ${LLAMA_STACK_INFERENCE_PROVIDER}
  provider_model_id: ${LLAMA_STACK_2_0_FLASH_MODEL}
  model_type: llm
- metadata: {}
  model_id: ${LLAMA_STACK_2_5_PRO_MODEL}
  provider_id: ${LLAMA_STACK_INFERENCE_PROVIDER}
  provider_model_id: ${LLAMA_STACK_2_5_PRO_MODEL}
  model_type: llm
- metadata: {}
  model_id: ${LLAMA_STACK_2_5_FLASH_MODEL}
  provider_id: ${LLAMA_STACK_INFERENCE_PROVIDER}
  provider_model_id: ${LLAMA_STACK_2_5_FLASH_MODEL}
  model_type: llm
shields: []
vector_dbs: []
datasets: []
scoring_fns: []
benchmarks: []
tool_groups:
- toolgroup_id: builtin::rag
  provider_id: rag-runtime
- toolgroup_id: mcp::assisted
  provider_id: model-context-protocol
  mcp_endpoint:
    uri: "${MCP_SERVER_URL}"
server:
  port: ${LLAMA_STACK_SERVER_PORT}
